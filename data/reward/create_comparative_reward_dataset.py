import os
import sys
import json
from tqdm import tqdm

from data.assertions import question_is_valid, answer_is_valid
from data.to_tfrecord_t5 import write_answer

ANSS_PATH = os.path.dirname(__file__) + "/{split}_anss.tsv"
ANS_PAIRS_PATH = os.path.dirname(__file__) + "/ans_pairs.json"
MAX_TIME_DIFF = 10 * 60
MAX_LEN_RATIO = 2

if __name__ == "__main__":
    """
    Parameters
    ----------
    static_dataset_path : str
        Dataset generated by create_redditadvice_2019.py
    """
    static_dataset_path = sys.argv[1]
    answer_pairs = {} # {ans_id: [ans_id]}
    with open(static_dataset_path, "r") as jsonl_file,\
        open(ANSS_PATH.format(split="train"), "w") as train_anss_f,\
        open(ANSS_PATH.format(split="val"), "w") as val_anss_f,\
        open(ANSS_PATH.format(split="test"), "w") as test_anss_f:
        split_to_file = {
            "train": train_anss_f,
            "val": val_anss_f,
            "test": test_anss_f
        }
        for line in tqdm(jsonl_file):
            question = json.loads(line)
            if not question_is_valid(question):
                continue
            for ans1_idx, ans1 in enumerate(question["good_comments"]):
                if not answer_is_valid(ans1):
                    continue
                ans1["length"] = len(ans1["body"])
                for ans2 in question["good_comments"][ans1_idx + 1:]:
                    if not answer_is_valid(ans2):
                        continue
                    time_diff = abs(ans1["created_utc"] - ans2["created_utc"])
                    if time_diff > MAX_TIME_DIFF:
                        continue
                    ans_lengths = [ans1["length"], len(ans2["body"])]
                    len_ratio = max(ans_lengths) / min(ans_lengths)
                    if len_ratio > MAX_LEN_RATIO:
                        continue
                    # Answer pair is valid
                    if ans1["id"] in answer_pairs:
                        answer_pairs[ans1["id"]].append(ans2["id"])
                    else:
                        answer_pairs[ans1["id"]] = [ans2["id"]]
                    if ans2["id"] in answer_pairs:
                        answer_pairs[ans2["id"]].append(ans1["id"])
                    else:
                        answer_pairs[ans2["id"]] = [ans1["id"]]
                # Write answer in tsv if it has at least one valid pair
                if ans1["id"] in answer_pairs:
                    write_answer(question, ans1, split_to_file[question["split"]])
    with open(ANS_PAIRS_PATH, "w") as ans_pairs_f:
        ans_pairs_f.write(json.dumps(answer_pairs, indent=1))