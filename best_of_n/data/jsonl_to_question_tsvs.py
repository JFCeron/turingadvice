import sys
import json
from tqdm import tqdm
from absl import flags
from datetime import datetime

from data.assertions import question_is_valid
from data.to_tfrecord_t5 import encoder, _trim_to_desired_length, _fix_reddit_text
from reward.comparative.data import SELFTEXT_DESIRED_LEN

QUESTIONS_OUT_PATH = "./best_of_n/data/{split}_questions.tsv"

def to_tsv_line(question):
    """
    Creates a tsv line from a question dict

    Args:
    question : dict
        A line from the dataset resulting from data.create_redditadvice_2019.

    Returns:
    line : str
        A string represented the formatted question
    """
    dt_date = datetime.utcfromtimestamp(question["created_utc"])
    str_date = [
        'January', 'February', 'March', 'April', 'May', 'June', 'July',
        'August', 'September', 'October', 'November', 'December'
        ][dt_date.month - 1] \
        + ' {}, {}'.format(dt_date.day, dt_date.year)
    # Sort the answers by score
    formatted_q = "Subreddit: {} Date: {} Title: {} Selftext: {}".format(
        _fix_reddit_text(question["subreddit"]),
        _fix_reddit_text(str_date),
        _fix_reddit_text(question["title"]),
        _fix_reddit_text(_trim_to_desired_length(
            encoder,
            question["selftext"],
            desired_len=SELFTEXT_DESIRED_LEN
        ))
    )
    return formatted_q

def _define_flags():
    flags.DEFINE_string(
        name="jsonl_path",
        default="data/redditadvice2019.jsonl",
        help="Dataset generated by create_redditadvice_2019.py"
    )
    return flags.FLAGS

if __name__ == "__main__":
    FLAGS = _define_flags()
    FLAGS(sys.argv)
    with open(FLAGS.jsonl_path, "r") as jsonl_file, \
         open(QUESTIONS_OUT_PATH.format(split="train"), "w") as train_file, \
         open(QUESTIONS_OUT_PATH.format(split="val"), "w") as val_file, \
         open(QUESTIONS_OUT_PATH.format(split="test"), "w") as test_file:
        for line in tqdm(jsonl_file):
            question = json.loads(line)
            question_str = to_tsv_line(question)
            if question["split"] == "train":
                train_file.write(question_str + "\n")
            elif question["split"] == "val":
                val_file.write(question_str + "\n")
            if question["split"] == "test":
                test_file.write(question_str + "\n")
            